version: 2.1

# -----------------------------
# Configs
# -----------------------------

aliases:
  - defaults: &defaults
      executor:
        name: node/default
        tag: "14.15"
      working_directory: ~/code
  - npm-cache: &npm-cache
      key: v1-app-goodchat-dependencies-{{ checksum "package-lock.json" }}

parameters:
  gc_env_filename:
    type: string
    default: ".gc_env"

  gc_env_file:
    type: string
    default: "/tmp/.gc_env"

# -----------------------------
# Reusable commands
# -----------------------------

commands:
  persist_repo:
    steps:
      - persist_to_workspace:
          root: ~/
          paths: code

  restore_repo:
    steps:
      - attach_workspace:
          at: ~/

  persist_build_to_repo:
    steps:
      - persist_to_workspace:
          root: ~/
          paths: code/build

  setup_node:
    steps:
      - node/install-npm:
          version: 7.20.3

  setup_environment:
    steps:
      - run: echo 'export GC_ENV_FILE=<< pipeline.parameters.gc_env_file >>' >> $BASH_ENV
      - run:
          name: Setup branch dependent variables
          command: |
            case "$CIRCLE_BRANCH" in
              live)
                echo 'export NODE_ENV=production' >> $GC_ENV_FILE
                echo 'export CERTIFICATE=hk.goodcity.p12' >> $GC_ENV_FILE
              ;;
              *)
                echo 'export NODE_ENV=staging' >> $GC_ENV_FILE
                echo 'export CERTIFICATE=hk.goodcity.p12' >> $GC_ENV_FILE
              ;;
            esac
      - run:
          name: Setup build-specific variables
          command: |
            echo "export BUILD_BUILDNUMBER=${CIRCLE_BUILD_NUM}" >> $GC_ENV_FILE
            echo 'export APP_VERSION=`node -e "console.log(require(\"./package.json\").version)"`' >> $GC_ENV_FILE
            echo 'export REACT_APP_VERSION=${NODE_ENV}-${APP_VERSION}-${BUILD_BUILDNUMBER}' >> $GC_ENV_FILE
      - run:
          name: Append to bash environment file
          command: cat $GC_ENV_FILE >> $BASH_ENV
      - persist_to_workspace:
          root: /tmp
          paths:
            - << pipeline.parameters.gc_env_filename >>

  apply_environment:
    steps:
      - attach_workspace:
          at: /tmp
      - run: touch << pipeline.parameters.gc_env_file >>
      - run:
          name: Append to bash environment file
          command: cat << pipeline.parameters.gc_env_file >> >> $BASH_ENV
      - run: echo 'export GC_ENV_FILE=<< pipeline.parameters.gc_env_file >>' >> $BASH_ENV

# -----------------------------
# Orbs
# -----------------------------

orbs:
  node: circleci/node@4.1.0
  azure-cli: circleci/azure-cli@1.1.0
  ruby: circleci/ruby@1.1.4
  android: circleci/android@0.2.3

# -----------------------------
# Jobs
# -----------------------------

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - persist_repo

  package_dependencies:
    <<: *defaults
    steps:
      - restore_repo
      - setup_environment
      - setup_node
      - node/install-packages:
          override-ci-command: npm ci --include=dev
          with-cache: true

  test:
    <<: *defaults
    steps:
      - restore_repo
      - apply_environment
      - setup_node
      - node/install-packages:
          override-ci-command: npm ci --include=dev
          with-cache: true
      - run:
          command: npm test -- --coverage
          environment:
            CI: true

  bundle_js:
    <<: *defaults
    steps:
      - restore_repo
      - apply_environment
      - setup_node
      - node/install-packages:
          override-ci-command: npm ci --include=dev
          with-cache: true
      - run: npm run build
      - persist_build_to_repo

  deploy_www:
    <<: *defaults
    steps:
      - restore_repo
      - apply_environment
      - ruby/install:
          version: "2.7"
      - run: (cd fastlane && bundle install)
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - when:
          condition:
            equal: [live, << pipeline.git.branch >>]
          steps:
            - run:
                name: Build and release
                command: (cd fastlane && bundle exec fastlane web release)
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: Build and push to the staging environment
                command: (cd fastlane && bundle exec fastlane web beta)

  deploy_ios:
    macos:
      xcode: "12.1.0"
    working_directory: ~/code
    steps:
      - restore_repo
      - apply_environment
      - run: (cd fastlane && bundle install)
      - run: brew install azure-cli
      - run: brew install node@14
      - run: npm install
      - run: az login --service-principal --username $AZURE_SP --password $AZURE_SP_PASSWORD --tenant $AZURE_SP_TENANT
      - run: mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
      - when:
          condition:
            equal: [live, << pipeline.git.branch >>]
          steps:
            - run:
                name: Build and release to app store
                command: (cd fastlane && bundle exec fastlane ios release)
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: Build and push to Testflight
                command: (cd fastlane && bundle exec fastlane ios beta)

  deploy_android:
    executor:
      name: android/android
      sdk-version: "23"
    working_directory: ~/code
    steps:
      - restore_repo
      - apply_environment
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - ruby/install:
          version: "2.7"
      - run: (cd fastlane && bundle install)
      - node/install
      - node/install-packages:
          override-ci-command: npm ci --include=dev
          with-cache: false
      - when:
          condition:
            equal: [live, << pipeline.git.branch >>]
          steps:
            - run:
                name: Build and release to production
                command: (cd fastlane && bundle exec fastlane android release)
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: Build and push to internal testing
                command: (cd fastlane && bundle exec fastlane android staging)

workflows:
  test_and_deploy:
    jobs:
      - checkout_code
      - package_dependencies:
          requires:
            - checkout_code
      - test:
          requires:
            - package_dependencies
      - bundle_js:
          requires:
            - test
      - deploy_www:
          requires:
            - bundle_js
          filters:
            branches:
              only: /^(main|live)$/
      - deploy_ios:
          requires:
            - bundle_js
          filters:
            branches:
              only: /^(main|live)$/
      - deploy_android:
          requires:
            - bundle_js
          filters:
            branches:
              only: /^(main|live)$/
